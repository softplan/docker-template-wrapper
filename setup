#!/bin/bash


function usage()
{
  echo \
"Usage: $0 [OPTIONS]

  Install the requested version of 'docker-template' in your system

Options:
    -g | --gem                                  Uses GEM instead of Bundler to install 'docker-template'
"
# Prints default usage options, from ./env.sh
  usage_general_options
}


function install_bundler()
{
  log info "Installing bundler"

  sudo gem install bundler

  return
}

function install_docker_template_bundler()
{
  log info "Installation of 'docker-template' with Bundler"

  log info "Copying Gemfile [${DIR}/Gemfile -> ${PWD}]"
  cp ${DIR}/Gemfile ./

  bundler show docker-template || { bundler install --path=vendor/bundler; log info "'docker-template' installed with Bundler"; }

  return
}

function install_docker_template_gem()
{
  log info "Installing docker-template with Gem"

  sudo gem install docker-template

  return
}

function write_gitignore_line()
{
  gitignore_file=$1
  shift
  ignore_pattern="$*"

  if [ ! -f "$gitignore_file" ]; then
    touch $gitignore_file
  fi

  if [    -z "$(grep -x "${ignore_pattern}" ${gitignore_file})" \
       -a -z "$(grep -x "#${ignore_pattern}" ${gitignore_file})" \
       -a -z "$(grep -x "# ${ignore_pattern}" ${gitignore_file})" ]; then
    echo "$gitignore_file -> $ignore_pattern"
    echo "$ignore_pattern" >> "$gitignore_file"
  fi

  return
}

function set_gitignore()
{
  for p in "# docker-template / docker-template-wrapper files" \
            "Gemfile" \
            "Gemfile.lock" \
            ".bundle/" \
            "vendor/" \
            "**/cache/"; do
    write_gitignore_line "${PWD}/.gitignore" $p
  done

  return
}

function setup()
{
  log info "Executing from ${PWD}"

  command_exists gem || { log error "Ruby or Gem not found. Please install Ruby 2.1+ before proceeding." ; exit $E_MISSING_DEPENDENCY; }

  command_exists bundler || install_bundler

  if [ ! "$DOCKER_TEMPLATE" == "gem" ]; then
    install_docker_template_bundler
  else
    install_docker_template_gem
  fi

  set_gitignore

  return
}


################################################################################
####   main
################################################################################

DIR=$(dirname "$(readlink -f "$0")")

# includes ./env.sh that resolve environment variables and add default functions
. ${DIR}/env.sh

for arg in "$@"; do
  case $arg in
    --gem | -g)
      DOCKER_TEMPLATE="gem"
      shift
      ;;

    -*)
      # Any remaining / not parsed option (arg starting with '--' | '-') is consider invalid
      exit_invalid_option "$arg"
      ;;
  esac
done

# set working dir PROJECT_PATH (resolved by ./env.sh) to setup
cd "$PROJECT_PATH"
setup "$@"
