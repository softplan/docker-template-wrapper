#!/bin/bash

# Prints application usage information
#
# IMPORTANT: this function must be before ./env.sh include because --help
#            needs it and it is parsed there.
function usage()
{
  echo \
"Usage: $0 [OPTIONS] REPOSITORIES...

  Update the given REPOSITORIES Dockerfiles and README.
  If no repositories are given, it updates all available repositories.

Params:
  REPOSITORIES    List of repositories to update.
                  If no repositories are given, it updates all available repositories."

  # Prints default usage options, from ./env.sh
  usage_general_options
}

# Cleanup all formatting from $(docker-template list) output line
#   Removes all coloring and hierarchy formatting from the output line.
#   Trims all whitespaces from BEGIN and END of the resulting line.
function cleanup_output()
{
  echo $1 \
  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" `# remove color from $(docker-template list) output` \
  | sed -e 's/├─//g'  | sed -e 's/│//g'                  `# remove formating from $(docker-template list) output` \
  | sed -e 's/^ *//'  | sed -e 's/ *$//'                 `# trim output`
}

# Extract value / name from a $(docker-template list) output line
# that already have been cleaned up $(cleanup_output)
#
# Example:
#   [repo] tomcat => tomcat
#   [tag] 8-jdk7  => 8-jdk7
function get_line_value()
{
  echo $1 | cut -d " " -f 2
}

# Cache README.md inserting links to Dockerfile for each tag/alias
#
# Creates the README file into [repo_cache_readme_file].
#
# template file, that MUST be located inside
# 'repos/[REPOSITORY]' template dir, and insert "Supported tags"
# on its TOP
#
# Params:
#     - $1 = [repository]            : repository name
#     - $2 = [repo_cache_readme_file]: path to cache README file
function create_readme()
{
  repository=$1
  repo_cache_readme_file=$2
  repo_template_dir="repos/${repository}"

  if [[ -z "$repository" ]]; then
    log error "Function [create_readme], required param [repository] not given."
    exit $E_MISSING_PARAM
  fi

  if [[ -z "$repo_cache_readme_file" ]]; then
    log error "Function [create_readme], required param [repo_cache_readme_file] not given."
    exit $E_MISSING_PARAM
  fi

  echo "# Supported tags and respective \`Dockerfile\` links" > "$repo_cache_readme_file"
  echo "" >> "$repo_cache_readme_file"
  tags=${REPO_TAGS[$repository]}
  for tag in $tags; do
    versions="\`$tag\`"

    aliases=${TAG_ALIASES[${repository}-${tag}]}
    for a in $aliases; do
      versions="$versions, \`$a\`"
    done

    echo "- [${versions} (*${tag}/Dockerfile*)](${PROJECT_URL}/blob/master/${repository}/${tag}/Dockerfile)" >> "$repo_cache_readme_file"
  done
  echo "" >> "$repo_cache_readme_file"
  cat "${repo_template_dir}/README.md" >> "$repo_cache_readme_file"
}

# Load all available Repositories data into global variables for
# further processing.
#
# Parses $(docker-template list) output into script global variables
#   - REPOSITORIES: list of available docker-template repos.
#                   String separated by [whitespaces].
#   - REPO_TAGS: associative array with a list of tags for each repository
#                [repository] in REPOSITORIES.
#                eg. REPO_TAGS[tomcat] => "8-jdk7 8-jdk8 7-jdk7 7-jdk8 6-jdk6 6-jdk7"
#   - TAG_ALIASES: associative array with a list of aliases for each
#                  [repository-tag].
#                eg. TAG_ALIASES[tomcat-8-jdk8] => "8 latest 8.0.36-jdk8"
function load_repositories()
{
  REPOSITORIES=
  REPO_TAGS=
  TAG_ALIASES=

  IFS_BAK=$IFS
  IFS='
'
  for line in $(docker-template list 2> /dev/null || bundler exec docker-template list); do
    clean_line=$(cleanup_output $line)
    log debug "line... ${line} => ${clean_line}"

    if [ -n "$(echo $clean_line | grep -E '\[repo\]')" ]; then
      REPO_NAME=$(get_line_value $clean_line)
      REPOSITORIES+=" ${REPO_NAME}"

      log debug "found repository => ${REPO_NAME} | repositories => ${REPOSITORIES}"
    fi

    if [ -n "$(echo $clean_line | grep -o -E '\[tag\]')" ]; then
      tag_name=$(get_line_value $clean_line)
      REPO_TAGS[$REPO_NAME]+=" ${tag_name}"

      log debug "found tag => ${tag_name} | repo_tags[${REPO_NAME}] => ${REPO_TAGS[$REPO_NAME]}"
    fi

    if [ -n "$(echo $clean_line | grep -o -E '\[alias\]')" ]; then
      alias_name=$(get_line_value $clean_line)
      TAG_ALIASES["${REPO_NAME}-${tag_name}"]+=" ${alias_name}"

      log debug "found alias => ${alias_name} | tag_aliases[${REPO_NAME}-${tag_name}] => ${TAG_ALIASES["${REPO_NAME}-${tag_name}"]}"
    fi
  done
  IFS=$IFS_BAK

  return
}

# Update the given REPOSITORIES (params). If no repositories (params)
# are given update all available repositories.
#
# Params:
#     $@ = [REPOSITORIES]: array of repositories to update.
update_repositories()
{
  requested_repositories=$*
  effective_repositories=

  log info "Executing from ${PWD}"

  load_repositories

  for r in $requested_repositories; do
    log info "Checking if repository [$r] exists"

    if [[ ! ${REPOSITORIES[@]} =~ $r ]]; then
      log info "Repository [${r}] not found."
      exit $E_REPO_NOTFOUND
    fi

    effective_repositories+=" ${r}"
  done

  # If there is no requested repository, uses all existing repositories
  effective_repositories=${effective_repositories:-$REPOSITORIES}

  for repository in $effective_repositories; do
    repo_template_dir="repos/${repository}"
    repo_target_dir="${repository}"
    repo_cache_dir="${repo_template_dir}/cache"
    repo_cache_readme_file="${repo_cache_dir}/README.md"

    tags=${REPO_TAGS[${repository}]}
    log info "================================================================="
    log info "repository = ${repository} => ${tags}"
    for tag in $tags; do
      aliases=${TAG_ALIASES[${repository}-${tag}]}
      log info "    tag = ${tag} => ${aliases}"
    done

    # Cache the updated Dockerfiles
    docker-template cache $repository --no-clean 2> /dev/null || bundler exec docker-template cache $repository --no-clean

    # Generate and caches README
    create_readme "$repository" "$repo_cache_readme_file"

    # Remove old files and copy new ones
    # It only removes non-hidden files. This is on purpose, to avoid removing
    # CI definition files.
    rm -rf "${repo_target_dir:?}"/*

    # Create target folder if not exists
    ls "$repo_target_dir" &> /dev/null || mkdir "$repo_target_dir"

    cp "$repo_cache_readme_file" "$repo_target_dir"
    for tag in $tags; do
      repo_tag_target_dir="${repo_target_dir}/${tag}"
      mkdir -p "$repo_tag_target_dir"
      mv "${repo_cache_dir}/${tag}/Dockerfile" "$repo_tag_target_dir"
      ln -sr "${repo_target_dir}/README.md" "$repo_tag_target_dir"

      if ! directory_is_empty "${repo_cache_dir}/${tag}/copy"; then
        mv "${repo_cache_dir}/${tag}/copy" "$repo_tag_target_dir"
      fi
    done

    # clean cache files
    rm -rf "$repo_cache_dir"
  done

  return
}


################################################################################
####   main
################################################################################

DIR=$(dirname "$(readlink -f "$0")")

# includes ./env.sh that resolve environment variables and add default functions
. ${DIR}/env.sh

REPOSITORIES=
declare -A REPO_TAGS
declare -A TAG_ALIASES

for arg in "$@"; do
  case $arg in
    -*)
      # Any remaining / not parsed option (arg starting with '--' | '-') is consider invalid
      exit_invalid_option $arg
      ;;
  esac
done

# set working dir PROJECT_PATH (resolved by ./env.sh) to run update
cd $PROJECT_PATH

if [ ! -f "${PROJECT_PATH}/opts.yml" ]; then
  log error "Docker-template project not found in \"project path\": ${PROJECT_PATH}"
  exit $E_REPO_NOTFOUND
fi

if command_exists docker-template ; then
  DOCKER_TEMPLATE='docker-template'
elif bundler show docker-template ; then
  DOCKER_TEMPLATE='bundler exec docker-template'
else
  log error "Command 'docker-template' not found. Please setup your system first. See README for instructions."
  exit $E_MISSING_DEPENDENCY
fi

log info "docker-template running through '${DOCKER_TEMPLATE}'"

update_repositories "$@"
